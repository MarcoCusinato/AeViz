#!/usr/bin/env python

import argparse
from AeViz.simulation.simulation import Simulation
from AeViz.utils.utils import time_array, restart_from

parser = argparse.ArgumentParser()
parser.add_argument('--sim-name', type=str, required=True,
                    help="Name of the simulation of which postprocessing ' \
                        'will be done.")
parser.add_argument('--sim-path', type=str, default=None, required=False,
                    help="Path of the simulation.")
parser.add_argument('--noprofiles', action='store_true', default=False, 
                    required=False, help="Ye, T, s, Fconv profiles are not " \
                        "calculated.")
parser.add_argument('--noGWs', action='store_true', default=False,
                    required=False, help="GWs postprocessing is not " \
                        "calculated.")
parser.add_argument('--noNu', action='store_true', default=False,
                    required=False, help="Neutrino postprocessing is not " \
                        "calculated.")
parser.add_argument('--plot', action='store_true', default=False,
                    required=False, help="Plots are created.")
parser.add_argument('--tob', default=None, type=float, required=False,
                    help="Sets the time of bounce manually and stores it into \
                        a file")
parser.add_argument('--restart-from', type=str, default=None, required=False,
                    help="The postprocessing will restart from the selected file.")
parser.add_argument('--rmax', type=float, default=None, required=False,
                    help="Maximum limit for the shock detection")
parser.add_argument('--column-index', type=int, default=None, required=False,
                    help="The index to use to indicate the line change in the GWs. "
                    "Typically between 0 and 3")
parser.add_argument('--spherical-harmonics', action='store_true', default=False,
                    help="Enables the computation of the spherical harmonics")
parser.add_argument('--neutrino-luminosity', action='store_true', default=False,
                    help="Enables the computation of the neutrino "
                    "luminosities from the output .h5 files")
parser.add_argument('--isodensity', action='store_true', default=False,
                    help="Enables the computation of isodensities lines.")
parser.add_argument('--inertia', action='store_true', default=False,
                    help="Enables the computation of the inertia moment.")

args = parser.parse_args()
sim = Simulation(args.sim_name, args.sim_path)
if args.tob:
    import numpy as np
    import os
    sim.tob = args.tob
    np.savetxt(os.path.join(sim.storage_path, 'tob.dat'), np.array([args.tob]))
if args.restart_from is not None:
    if not args.restart_from.endswith('.h5'):
        args.restart_from += '.h5'
    print(f'Postprocessing restarting from {args.restart_from}')
    restart_from(sim, args.restart_from)
time_array(sim)
sim.PNS_radius()
sim.shock_radius(rmax=args.rmax)
if not args.noNu:
    sim.neutrino_spheres()
sim.gain_radius()
sim.PNS_mass_ene()
sim.PNS_kick_velocity()
if args.neutrino_luminosity:
    sim.total_neutrino_luminosity()
if args.isodensity:
    sim.isodensities_lines()
if args.inertia:
    sim.inertia_moment()
if sim.dim > 1:
    sim.PNS_angular_momentum_neutrinos()
if not args.noprofiles:
    sim.radial_profile('Ye')
    sim.radial_profile('radial_velocity')
if not args.noGWs and sim.dim > 1:
    sim.hydro_strain()
if args.spherical_harmonics:
    sim.rho_spherical_harmonics()
    sim.rho_spherical_harmonics(l=0, m=0)
if args.plot:
    from AeViz import ae
    ae.Load(args.sim_name)
    ## EXPLOSION
    ae.set_simple_labelling()
    ae.shock_radius(rad='avg')
    ae.shock_radius(rad='min')
    ae.shock_radius(rad='max')
    ae.set_simple_labelling()
    ae.save_plot('shock_radius')
    ae.Close()
    ae.explosion(comp='mass')
    ae.save_plot('explosion_mass')
    ae.Close()
    ae.explosion(comp='tot')
    ae.explosion(comp='kin')
    ae.explosion(comp='mag')
    ae.explosion(comp='ratio')
    ae.save_plot('explosion_energy')
    ae.Close()
    print("Explosion summary plotted.")
    ## GAIN REGION
    ae.set_simple_labelling()
    ae.gain_radius(rad='avg')
    ae.gain_radius(rad='min')
    ae.gain_radius(rad='max')
    ae.set_simple_labelling()
    ae.gain(comp='mass')
    ae.gain(comp='nu_heath')
    ae.save_plot('gain')
    ae.Close()
    print("Gain summary plotted.")
    ## NEUTRINOS
    if not args.noNu:
        ae.set_simple_labelling(no_nu=True)
        ae.neutrino_spheres(comp='nue', rad='avg')
        ae.neutrino_spheres(comp='nue', rad='min')
        ae.neutrino_spheres(comp='nue', rad='max')
        ae.neutrino_spheres(comp='nua', rad='avg')
        ae.neutrino_spheres(comp='nua', rad='min')
        ae.neutrino_spheres(comp='nua', rad='max')
        ae.neutrino_spheres(comp='nux', rad='avg')
        ae.neutrino_spheres(comp='nux', rad='min')
        ae.neutrino_spheres(comp='nux', rad='max')
        ae.set_simple_labelling()
        ae.save_plot('neutrino_spheres')
        ae.Close()
    ae.global_neutrino_luminosities(comp='all')
    ae.global_neutrino_mean_energies(comp='all')
    ae.save_plot('neutrinos')
    ae.Close()
    print("Neutrino summary plotted.")
    ## PNS
    ae.set_simple_labelling()
    ae.PNS_radius(rad='avg')
    ae.PNS_radius(rad='max')
    ae.PNS_radius(rad='min')
    ae.set_simple_labelling()
    ae.PNS(comp='mass')
    ae.save_plot('PNS_mass')
    ae.Close()
    ae.PNS(comp='tot')
    ae.PNS(comp='rot')
    ae.PNS(comp='mag')
    ae.PNS(comp='kin')
    ae.save_plot('PNS_energy')
    ae.Close()
    if sim.dim > 1:
        ae.PNS_angular_mom(comp='Ltot')
        ae.PNS_angular_mom_nu(comp='Ltot')
        ae.save_plot('PNS_L')
        ae.Close()
    print("PNS summary plotted.")
    ## INNERCORE
    ae.set_simple_labelling()
    ae.innercore_radius(comp='avg')
    ae.innercore_radius(comp='min')
    ae.innercore_radius(comp='max')
    ae.set_simple_labelling()
    ae.innercore(comp='mass')
    ae.innercore(comp='T/W')
    ae.save_plot('innercore_mass')
    ae.Close()
    ae.innercore(comp='kin')
    ae.innercore(comp='mag')
    ae.innercore(comp='rot')
    ae.innercore(comp='tot')
    ae.save_plot('innercore_energy')
    ae.Close()
    print("Innercore summary plotted.")
    ## PNS CORE
    ae.set_simple_labelling()
    ae.PNS_nucleus_radius(comp='avg')
    ae.PNS_nucleus_radius(comp='min')
    ae.PNS_nucleus_radius(comp='max')
    ae.set_simple_labelling()
    ae.PNS_nucleus(comp='mass')
    ae.save_plot('PNS_core_mass')
    ae.Close()
    ae.PNS_nucleus(comp='kin')
    ae.PNS_nucleus(comp='mag')
    ae.PNS_nucleus(comp='rot')
    ae.PNS_nucleus(comp='grav')
    ae.save_plot('PNS_core_energy')
    ae.Close()
    print("PNS core summary plotted.")
    ## KICK VELOCITY
    ae.kick_velocity(comp='tot', flavour='tot')
    ae.save_plot('kick_velocity')
    ae.Close()
    print("Kick velocity summary plotted.")
    if not args.noprofiles:
        ## PROFILES
        ae.BV_frequency(projection='2D', plane='time')
        ae.save_plot('BV_frequency')
        ae.Close()
        ae.Rossby_number(projection='2D', plane='time')
        ae.save_plot('Rossby_number')
        ae.Close()
        ae.temperature(projection='2D', plane='time')
        ae.save_plot('temperature')
        ae.Close()
        ae.entropy(projection='2D', plane='time')
        ae.save_plot('entropy')
        ae.Close()
        ae.Ye(projection='2D', plane='time')
        ae.save_plot('Ye')
        ae.Close()
        ae.convective_flux(plane='time', projection='2D')
        ae.save_plot('convective_flux')
        ae.Close()
        ae.gas_pressure(projection='2D', plane='time')
        ae.save_plot('gas_pressure')
        ae.Close()
        ae.rho(projection='2D', plane='time')
        ae.save_plot('rho')
        ae.Close()
        print("Profiles plotted.")
    ## GWs
    if sim.dim > 1:
        ae.GWs(comp='all', column_index=args.column_index)
        ae.save_plot('GWs')
        ae.Close()
        ae.GWs(comp='all', projection='2D', spectrogram=True, 
               column_index=args.column_index)
        ae.save_plot('GWs_spectrogram')
        ae.Close()
        print("GWs summary plotted.")
        if not args.noGWs:
            if sim.dim == 2:
                ae.GWs(comp='h+eq', decomposition=True)
                ae.save_plot('GWs_decomposition_h+eq')
                ae.Close()
            else:
                for strain in ['h+eq', 'h+pol', 'hxeq', 'hxpol']:
                    ae.GWs(comp=strain, decomposition=True)
                    ae.save_plot('GWs_decomposition_' + strain)
                    ae.Close()
            print("GWs decomposition summary plotted.")
print("All done.")